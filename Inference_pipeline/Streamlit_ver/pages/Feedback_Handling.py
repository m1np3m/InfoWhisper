import streamlit as st
from pymongo import MongoClient
import time
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import os
import pytz
from datetime import datetime
import re

# C√†i ƒë·∫∑t ti√™u ƒë·ªÅ trang v√† b·ªë c·ª•c
st.set_page_config(
    page_title="AI News - B√°o C√°o L·ªói",
    layout="centered",
    page_icon="üîß",
    initial_sidebar_state="collapsed"
)

# Custom CSS ƒë·ªÉ l√†m ƒë·∫πp giao di·ªán
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
    }
    
    .main-header h1 {
        margin: 0;
        font-size: 2.5rem;
        font-weight: 700;
    }
    
    .main-header p {
        margin: 0.5rem 0 0 0;
        font-size: 1.1rem;
        opacity: 0.9;
    }
    
    .info-box {
        background-color: #f8f9fa;
        border-left: 4px solid #667eea;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
        text-align: center;
    }
    
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
        text-align: center;
    }
    
    .form-section {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    
    .section-header {
        color: #667eea;
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 1rem;
        border-bottom: 2px solid #e9ecef;
        padding-bottom: 0.5rem;
    }
    
    .stButton > button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 25px;
        font-weight: 600;
        font-size: 1.1rem;
        transition: all 0.3s ease;
        width: 100%;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }
    
    .required-field {
        color: #dc3545;
    }
</style>
""", unsafe_allow_html=True)

# K·∫øt n·ªëi MongoDB
@st.cache_resource
def init_mongodb():
    try:
        mongoclient = os.getenv("MONGO_CLIENT")
        if not mongoclient:
            st.error("üîß L·ªói c·∫•u h√¨nh: Kh√¥ng t√¨m th·∫•y MONGO_CLIENT")
            return None, None
        client = MongoClient(mongoclient)
        db = client["AI_News_Error"]
        error_reports_collection = db["ErrorReportsDB"]
        return client, error_reports_collection
    except Exception as e:
        st.error(f"üîß L·ªói k·∫øt n·ªëi MongoDB: {e}")
        return None, None

# H√†m validate email
def validate_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

# H√†m g·ª≠i email th√¥ng b√°o
def send_email_notification(user_name, user_email, error_description, error_type, error_data_type=None):
    sender_email = os.getenv("SENDER_MAIL")
    sender_password = os.getenv("SENDER_PASSWORD")
    receiver_email = os.getenv("RECEIVER_MAIL")
    
    if not all([sender_email, sender_password, receiver_email]):
        st.warning("‚ö†Ô∏è C·∫•u h√¨nh email ch∆∞a ƒë·∫ßy ƒë·ªß. B√°o c√°o ƒë√£ ƒë∆∞·ª£c l∆∞u nh∆∞ng kh√¥ng th·ªÉ g·ª≠i email th√¥ng b√°o.")
        return False
    
    try:
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = receiver_email
        msg['Subject'] = f"üîß [News-Bot] B√°o c√°o l·ªói m·ªõi t·ª´ {user_name}"
        
        # X·ª≠ l√Ω description ƒë·ªÉ tr√°nh l·ªói backslash trong f-string
        formatted_description = error_description.replace('\n', '<br>')
        data_type_html = f"<p><strong>Lo·∫°i d·ªØ li·ªáu l·ªói:</strong> {error_data_type}</p>" if error_data_type else ""
        
        body = f"""
        <html>
        <body>
        <h2 style="color: #667eea;">B√°o c√°o l·ªói m·ªõi t·ª´ AI NEWs</h2>
        
        <p><strong>Ng∆∞·ªùi b√°o c√°o:</strong> {user_name}</p>
        <p><strong>Email li√™n h·ªá:</strong> {user_email}</p>
        <p><strong>Lo·∫°i l·ªói:</strong> {error_type}</p>
        {data_type_html}
        
        <h3 style="color: #667eea;">M√¥ t·∫£ chi ti·∫øt:</h3>
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
        {formatted_description}
        </div>
        
        <p style="margin-top: 20px; color: #6c757d;">
        <em>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng AI NEWs</em>
        </p>
        </body>
        </html>
        """
        
        msg.attach(MIMEText(body, 'html'))
        
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(sender_email, sender_password)
        text = msg.as_string()
        server.sendmail(sender_email, receiver_email, text)
        server.quit()
        return True
        
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i email th√¥ng b√°o: {e}")
        return False

# Header ch√≠nh
st.markdown("""
<div class="main-header">
    <h1>üîß B√°o C√°o L·ªói</h1>
    <p>AI NEWs - H·ªó tr·ª£ kh·∫Øc ph·ª•c s·ª± c·ªë</p>
</div>
""", unsafe_allow_html=True)

# Th√¥ng tin gi·ªõi thi·ªáu
st.markdown("""
<div class="info-box">
    <h4>üìã H∆∞·ªõng d·∫´n b√°o c√°o l·ªói</h4>
    <p><strong>AI NEWs</strong> lu√¥n n·ªó l·ª±c cung c·∫•p d·ªãch v·ª• t·ªët nh·∫•t. N·∫øu b·∫°n g·∫∑p ph·∫£i l·ªói ho·∫∑c s·ª± c·ªë, 
    vui l√≤ng b√°o c√°o chi ti·∫øt ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ kh·∫Øc ph·ª•c k·ªãp th·ªùi.</p>
    <p>‚ú® <strong>Cam k·∫øt:</strong> Ch√∫ng t√¥i s·∫Ω xem x√©t v√† ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù.</p>
</div>
""", unsafe_allow_html=True)

# Form b√°o c√°o l·ªói
with st.container():
    st.markdown('<div class="form-section">', unsafe_allow_html=True)
    st.markdown('<div class="section-header">üë§ Th√¥ng tin li√™n h·ªá</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        user_name = st.text_input(
            "H·ªç v√† t√™n *",
            placeholder="Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n",
            help="Th√¥ng tin n√†y gi√∫p ch√∫ng t√¥i li√™n h·ªá l·∫°i v·ªõi b·∫°n"
        )
    with col2:
        user_email = st.text_input(
            "Email li√™n h·ªá *",
            placeholder="example@email.com",
            help="Email ƒë·ªÉ ch√∫ng t√¥i ph·∫£n h·ªìi k·∫øt qu·∫£ x·ª≠ l√Ω"
        )
    
    st.markdown('</div>', unsafe_allow_html=True)

# Th√¥ng tin l·ªói
with st.container():
    st.markdown('<div class="form-section">', unsafe_allow_html=True)
    st.markdown('<div class="section-header">üêõ Th√¥ng tin l·ªói</div>', unsafe_allow_html=True)
    
    error_type = st.selectbox(
        "Lo·∫°i l·ªói *",
        ["", "üñºÔ∏è L·ªói giao di·ªán", "‚öôÔ∏è L·ªói ch·ª©c nƒÉng", "üåê L·ªói k·∫øt n·ªëi", "üìä L·ªói th√¥ng tin", "‚ùì Kh√°c"],
        help="Ch·ªçn lo·∫°i l·ªói ph√π h·ª£p nh·∫•t v·ªõi v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i"
    )
    
    error_data_type = None
    if error_type == "üìä L·ªói th√¥ng tin":
        error_data_type = st.selectbox(
            "Lo·∫°i th√¥ng tin b·ªã l·ªói *",
            ["Ch√≠nh tr·ªã",
             "Th·ªùi s·ª±",
             "Kinh doanh",
             "D√¢n t·ªôc v√† T√¥n gi√°o",
             "Th·ªÉ thao",
             "Gi√°o d·ª•c",
             "Th·∫ø gi·ªõi",
             "ƒê·ªùi s·ªëng",
             "VƒÉn h√≥a - Gi·∫£i tr√≠",
             "S·ª©c kh·ªèe",
             "C√¥ng ngh·ªá",
             "Ph√°p lu·∫≠t",
             "B·∫•t ƒë·ªông s·∫£n",
             "Du l·ªãch"
            ],
            help="Chi ti·∫øt lo·∫°i th√¥ng tin c√≥ v·∫•n ƒë·ªÅ"
        )
    
    error_description = st.text_area(
        "M√¥ t·∫£ chi ti·∫øt l·ªói *",
        placeholder="Vui l√≤ng m√¥ t·∫£ chi ti·∫øt:\n- B·∫°n ƒëang th·ª±c hi·ªán thao t√°c g√¨?\n- L·ªói xu·∫•t hi·ªán nh∆∞ th·∫ø n√†o?\n- C√≥ th√¥ng b√°o l·ªói n√†o kh√¥ng?\n- B·∫°n mong mu·ªën ƒëi·ªÅu g√¨ x·∫£y ra?",
        height=150,
        help="M√¥ t·∫£ c√†ng chi ti·∫øt c√†ng gi√∫p ch√∫ng t√¥i kh·∫Øc ph·ª•c nhanh ch√≥ng"
    )
    
    st.markdown('</div>', unsafe_allow_html=True)

# Validation v√† g·ª≠i b√°o c√°o
st.markdown("---")

# Ki·ªÉm tra validation
validation_errors = []
if st.button("üöÄ G·ª≠i b√°o c√°o", key="submit_report"):
    if not user_name.strip():
        validation_errors.append("Vui l√≤ng nh·∫≠p h·ªç t√™n")
    if not user_email.strip():
        validation_errors.append("Vui l√≤ng nh·∫≠p email")
    elif not validate_email(user_email):
        validation_errors.append("Email kh√¥ng h·ª£p l·ªá")
    if not error_type or error_type == "":
        validation_errors.append("Vui l√≤ng ch·ªçn lo·∫°i l·ªói")
    if error_type == "üìä L·ªói th√¥ng tin" and (not error_data_type or error_data_type == ""):
        validation_errors.append("Vui l√≤ng ch·ªçn lo·∫°i th√¥ng tin b·ªã l·ªói")
    if not error_description.strip():
        validation_errors.append("Vui l√≤ng m√¥ t·∫£ chi ti·∫øt l·ªói")
    
    if validation_errors:
        st.markdown(f"""
        <div class="error-box">
            <h4>‚ùå Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin:</h4>
            <ul style="text-align: left; margin-left: 20px;">
                {''.join([f"<li>{error}</li>" for error in validation_errors])}
            </ul>
        </div>
        """, unsafe_allow_html=True)
    else:
        # Kh·ªüi t·∫°o k·∫øt n·ªëi MongoDB
        client, error_reports_collection = init_mongodb()
        
        if error_reports_collection is not None:
            # L·∫•y m√∫i gi·ªù Vi·ªát Nam
            vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
            vn_time = datetime.now(vn_tz)
            
            # T·∫°o d·ªØ li·ªáu b√°o c√°o
            report_data = {
                "name": user_name.strip(),
                "email": user_email.strip(),
                "description": error_description.strip(),
                "error_type": error_type,
                "error_data_type": error_data_type,
                "timestamp": vn_time.strftime('%Y-%m-%d %H:%M:%S'),
                "status": "new"
            }
            
            try:
                # L∆∞u v√†o MongoDB
                result = error_reports_collection.insert_one(report_data)
                
                # G·ª≠i email th√¥ng b√°o
                email_sent = send_email_notification(
                    user_name, user_email, error_description, 
                    error_type, error_data_type
                )
                
                # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                st.markdown(f"""
                <div class="success-box">
                    <h4>‚úÖ B√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!</h4>
                    <p>C·∫£m ∆°n <strong>{user_name}</strong>, ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c b√°o c√°o c·ªßa b·∫°n.</p>
                    <p>üìß M√£ b√°o c√°o: <code>{str(result.inserted_id)[:8]}...</code></p>
                    <p>üïí Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω v√† ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù.</p>
                    {f"<p>üì¨ Email th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn qu·∫£n tr·ªã vi√™n.</p>" if email_sent else ""}
                </div>
                """, unsafe_allow_html=True)
                
                # Auto refresh sau 3 gi√¢y
                time.sleep(3)
                st.rerun()
                
            except Exception as e:
                st.markdown(f"""
                <div class="error-box">
                    <h4>‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u b√°o c√°o</h4>
                    <p>L·ªói: {str(e)}</p>
                    <p>Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.</p>
                </div>
                """, unsafe_allow_html=True)

# Footer
st.markdown("---")
